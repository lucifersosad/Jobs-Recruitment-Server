import { Request, Response } from "express";
import { Post } from "../../../../models/post.model";
import { Comment } from "../../../../models/comment.model";
import { timeAgo } from "../../../../helpers/timeHelper";
import { putObject } from "../../../../helpers/uploadToS3Aws";
import Employer from "../../../../models/employers.model";



export const getMyPosts = async (req: Request, res: Response) => {
  try {
    const posts = await Post.find({ employerId: req["user"]["_id"] }).sort({ createdAt: -1 });

    res.status(200).json(posts.map(post => ({
      id: post._id,
      caption: post.caption,
      images: post.images,
      likes: post.likes.length,
      timeAgo: timeAgo(post.createdAt),
    })));
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


export const replyToComment = async (req, res) => {
  try {
    const { postId, commentId } = req.params;
    const { content } = req.body;
    const userId = req.user._id;

    if (!content.trim()) {
      return res.status(400).json({ message: "N·ªôi dung ph·∫£n h·ªìi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    const originalComment = await Comment.findById(commentId);
    if (!originalComment) {
      return res.status(404).json({ message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra employer c√≥ quy·ªÅn tr·∫£ l·ªùi kh√¥ng
    const post = await Post.findById(postId);
    if (!post) {
      return res.status(404).json({ message: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i" });
    }

    const employer = await Employer.findById(userId);
    if (!employer || userId.toString() !== post.employerId.toString()) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn tr·∫£ l·ªùi b√¨nh lu·∫≠n n√†y" });
    }

    const replyComment = await Comment.create({
      postId,
      userId,
      content,
      parentCommentId: commentId,
    });

    res.status(201).json({ message: "Tr·∫£ l·ªùi b√¨nh lu·∫≠n th√†nh c√¥ng", reply: replyComment });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi tr·∫£ l·ªùi b√¨nh lu·∫≠n", error });
  }
};

// üî• Xem danh s√°ch User ƒë√£ like b√†i post
export const getLikes = async (req: Request, res: Response) => {
  try {
    const post = await Post.findById(req.params.postId).populate("likes", "fullName");
    if (!post) {
      return res.status(404).json({ message: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i" });
    }
    res.status(200).json(post.likes || []);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};




export const createPost = async (req: Request, res: Response) => {
  try {
    const { caption } = req.body;
    console.log("Body:", req.body); 
    console.log("Files:", req.files); 

    if (!caption) {
      return res
        .status(400)
        .json({ message: "N·ªôi dung b√†i vi·∫øt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    let imageUrls: string[] = [];

   
    let files: Express.Multer.File[] = [];

    if (Array.isArray(req.files)) {
      files = req.files; 
    } else if (req.files && typeof req.files === "object") {
      files = req.files["images"] as Express.Multer.File[] ?? [];
    }

    
    if (!Array.isArray(files) || files.length === 0) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ file h·ª£p l·ªá" });
    }

    
    for (const file of files) {
      const result = await putObject(file.buffer, `posts/${Date.now()}-${file.originalname}`, 'image/jpeg');
      if (result) {
        imageUrls.push(result.url);
      }
    }

    
    const post = await Post.create({
      employerId: req["user"]["_id"],
      caption,
      images: imageUrls,
    });

    res.status(201).json(post);
  } catch (error) {
    console.error("L·ªói khi t·∫°o b√†i vi·∫øt:", error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};





export const updatePost = async (req: Request, res: Response) => {
  try {
    const post = await Post.findById(req.params.id);

    if (!post) {
      return res.status(404).json({ message: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i" });
    }

    
    if (post.employerId.toString() !== req["user"]["_id"].toString()) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt n√†y" });
    }

    let updatedImages = post.images;
    let files: Express.Multer.File[] = [];

 
    if (Array.isArray(req.files)) {
      files = req.files;
    } else if (req.files && typeof req.files === "object") {
      files = req.files["images"] as Express.Multer.File[] ?? [];
    }


    if (Array.isArray(files) && files.length > 0) {
      updatedImages = [];
      for (const file of files) {
        const result = await putObject(file.buffer, `posts/${Date.now()}-${file.originalname}`, 'image/jpeg');
        if (result) {
          updatedImages.push(result.url);
        }
      }
    }

  
    post.caption = req.body.caption || post.caption;
    post.images = updatedImages;
    await post.save();

    res.status(200).json(post);
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:", error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};



export const deletePost = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const employerId = req["user"]["_id"]; 

    
    const post = await Post.findOne({ _id: id, employerId });
    if (!post) {
      return res.status(404).json({ message: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a." });
    }

    // X√≥a b√†i vi·∫øt
    await Post.findByIdAndDelete(id);
    res.status(200).json({ message: "ƒê√£ x√≥a b√†i vi·∫øt th√†nh c√¥ng." });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

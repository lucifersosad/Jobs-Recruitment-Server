import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export const evaluate = async (cvs) => {
  try {
    const response = await openai.responses.create({
      model: "gpt-4.1-mini",
      input: [
        {
          role: "system",
          content: [
            {
              type: "input_text",
              text: 'B·∫°n l√† chuy√™n vi√™n tuy·ªÉn d·ª•ng. V·ªõi m·ªói file CV, h√£y ƒë·ªçc n·ªôi dung v√† so s√°nh v·ªõi m√¥ t·∫£ c√¥ng vi·ªác ƒë∆∞·ª£c cung c·∫•p.\nTr·∫£ v·ªÅ JSON d·∫°ng:\n\n[\n  {\n    "id": ID CV ,\n    "score": s·ªë t·ª´ 0 ƒë·∫øn 100 th·ªÉ hi·ªán ƒë·ªô ph√π h·ª£p,\n    "reason": ["..."]\n  }\n]\n\nCh·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m vƒÉn b·∫£n kh√°c.Ch·ªâ tr·∫£ v·ªÅ ti·∫øng vi·ªát',
            },
          ],
        },
        {
          role: "user",
          content: [
            {
              type: "input_text",
              text: "ƒê√¢y l√† m√¥ t·∫£ c√¥ng vi·ªác:\nV·ªã tr√≠ tuy·ªÉn d·ª•ng: Entity Data Management Associate\n\nM√¥ t·∫£ c√¥ng vi·ªác: Accountable for accuracy and completeness of entity data in Source, Salesforce and Oracle. Reviewing each request to create / update entity. Verifying required information using authorised sources. Researching to enrich entity records as required by EMS. Managing approvals process. Reviewing DQ dashboard and Duplicates dashboard and action as required. Providing reports and data extracts from source / core systems when required.\n\nY√™u c·∫ßu c√¥ng vi·ªác: Research skills to be able to find entity information/ data from authorised sources. Ability to perform repetitive tasks with a high degree of accuracy. Strong attention to detail. Strong problem solving skills. English proficient\n\nC·∫•p b·∫≠c: M·ªõi T·ªët Nghi·ªáp\n\nS·ªë nƒÉm kinh nghi·ªám: Kh√¥ng y√™u c·∫ßu\n\nK·ªπ nƒÉng: Research Ability, Data Management",
            },
          ],
        },
        {
          role: "user",
          content: cvs
        }
      ],
      text: {
        format: {
          type: "json_object",
        },
      },
      reasoning: {},
      tools: [],
      temperature: 0.3,
      max_output_tokens: 2048,
      top_p: 1,
      store: true,
    });
    return JSON.parse(response.output_text);
  } catch (error) {
    console.log("üöÄ ~ test ~ error:", error);
    throw error
  }
};
